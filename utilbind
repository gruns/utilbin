#!/usr/bin/env python3.6
# -*- coding: utf-8 -*-

# Copyright _!_
#
# License _!_
#
# Original author: Ansgar Grunseid

import os
import re
import sys
from subprocess import PIPE
from importlib import import_module
from contextlib import contextmanager
from os.path import isdir, dirname, join as pjoin

import curio
import docopt
from furl import furl
from curio import timeout_after, TaskTimeout
from curio.subprocess import CalledProcessError

from http_server import PlainHTTPServer, PlainHTTPSocketWrapper

# TODO(grun): Add daemonize/nodaemon options.
USAGE = """
utilbind - Utility Bin

Usage:
  utilbind [-p <port>]
  utilbind list [api | utilities]
  utilbind build (all | <utility>) [web | native]
  utilbind run <resource> [<action> [<action-args>...]]

Options:
  --version                   Show version.
  -h --help                   Show this help information.
  -p <port>, --port <port>    Port to bind to in listen mode.
"""
DEFAULT_PORT = 4337
UTILITY_TIMEOUT = 5  # Seconds.
UTILITIES_DIRECTORY = pjoin(dirname(__file__), 'utilities/')

class InvalidUsage(NotImplementedError):
    def __init__(self, message):
        self.message = message

def lget(l, index, default=None):
    try:
        return l[index]
    except IndexError:
        return default

@contextmanager
def printDoneOnCompletion(msg):
    print(msg, end=' ', flush=True)
    yield
    print('done.')

def urlToArgv(url):
    argv = [
        f'--{k}={v}' if v is not None else
        (f'-{k}' if len(k) == 1 else f'--{k}')
        for k, v in furl(url).args.allitems()]
    return argv

def loadUtility(name):
    util = None

    try:
        module = import_module(f'utilities.{name}')  # ImportError.
        utilCls = module.Utility  # AttributeError.
    except (ImportError, AttributeError):
        pass
    else:
        util = utilCls()

    return util

def discoverAllUtilities(*, webReady=False, nativeReady=False):
    utils = [
        loadUtility(name)
        for name in os.listdir(UTILITIES_DIRECTORY)
        if isdir(pjoin(UTILITIES_DIRECTORY, name))]

    utils = [
        u for u in utils if u is not None and
        (not webReady or u.isWebReady()) and
        (not nativeReady or u.isNativeReady())]

    return utils

def defaultResourceAction(api, resource):
    if len(api.get(resource, {})) == 1:
        return list(api[resource].keys())[0]
    return None

def extractAPIResourcesAndActions(util):
    resourcesAndActions = []
    validAPIString = lambda s: re.match('^[a-zA-Z0-9_]+[a-zA-Z0-9_-]*$', s)

    usage = lget(docopt.parse_section('usage:', util.usage), 0, '')
    usage = usage.split(':', 1)[-1]  # Drop 'Usage:'.
    for line in usage.strip().splitlines():
        tokens = line.split()
        resource = lget(tokens, 0, '')
        action = lget(tokens, 1, '')
        if validAPIString(resource) and validAPIString(action):
            resourcesAndActions.append((resource, action))

    return resourcesAndActions

def buildAPI(utils):
    d = {}
    resourcesAndActions = [
        (resource, action, util) for util in utils
        for resource, action in extractAPIResourcesAndActions(util)]
    for resource, action, util in resourcesAndActions:
        d.setdefault(resource, {})[action] = util
    return d


async def runUtility(util, action=None, argv=None):  # Raises InvalidUsage.
    success, stdout, stderr = False, None, None

    argv = [action] + argv if action else argv
    if '-h' in argv or '--help' in argv:
        return True, util.usage, None

    try:
        docopt.docopt(util.usage, argv, help=False)
    except docopt.DocoptExit as e:
        errmsg = f'Unrecognized argument(s) provided to {util.displayName}'
        raise InvalidUsage(f'{errmsg}\n\n{util.usage}')

    try:
        async with timeout_after(UTILITY_TIMEOUT):
            proc = await curio.subprocess.run(
                [util.nativeExePath] + argv, stdout=PIPE, stderr=PIPE)
    except TaskTimeout:
        # TODO(grun): Raise a timeout exception for the caller.
        print(f'Utility {util.name} timed out after {UTILITY_TIMEOUT} seconds.')
    except CalledProcessError as e:
        # TODO(grun): Raise a utility run failed exception for the caller.
        print(
            f'Utility {util.name} returned with non-zero retcode: '
            f'{e.returncode}.')
    else:
        success = (proc.returncode == 0)
        stdout, stderr = util.processOutput(proc.stdout, proc.stderr)

    return success, stdout, stderr

async def runUtilityCLI(cli):
    utils = discoverAllUtilities(nativeReady=True)
    api = buildAPI(utils)

    action = cli.get('<action>')
    argv = cli.get('<action-args>')
    resource = cli.get('<resource>')
    if resource in api:
        if action and action.startswith('-'):  # Option, like -o, not an action.
            argv.insert(0, action)
            action = None

        # If no action was provided, but <resource> only has one available
        # action, default to that action.
        action = action or defaultResourceAction(api, resource)

        util = api[resource].get(action)
        if util:
            try:
                success, stdout, stderr = await runUtility(util, action, argv)
            except InvalidUsage as e:
                print(e.message)
            else:
                if success:
                    print(stdout, end='')
                    if stderr:
                        print(f'\nstderr: {stderr}', end='')
        else:
            print(
                f'No such action "{action}" for resource "{resource}".'
                ' Did you mispell it?')
    else:
        print(f'No such resource named "{resource}". Did you mispell it?')

def listAPICLI(cli):
    # TODO(grun): Print usage, too. That is, instead of just printing
    #
    #   base64
    #     encode
    #     decode
    #
    # print the full usage, like
    #
    #   base64
    #     encode [INPUT] [options]
    #     decode [INPUT] [options]
    #
    utils = discoverAllUtilities()    
    api = buildAPI(utils)
    for i, (resource, actions) in enumerate(api.items()):
        print(end='' if i == 0 else '\n')
        print(f'{resource}')
        for action in actions:
            print(f'  {action}')

def listUtilitiesCLI(cli):
    utils = discoverAllUtilities()    
    api = buildAPI(utils)
    for i, util in enumerate(utils):
        print(end='' if i == 0 else '\n')
        wr = '%sWeb' % ('' if util.isWebReady() else '*Not* ')
        nr = '%sNative' % ('' if util.isNativeReady() else '*Not* ')
        print(f'{util.name} ({util.displayName}): [{wr} Ready, {nr} Ready]')

        usage = docopt.parse_section('usage:', util.usage)[0]
        for line in usage.split(':', 1)[-1].strip().splitlines():
            print(f'  %s' % line.strip())
        
def buildUtilitiesCLI(cli):
    tobuild = []

    name = cli.get('<utility>')
    if name:
        util = loadUtility(name)
        if util:
            tobuild.append(util)
        else:
            print(f'No such utility named "{name}". Did you mispell it?')
    elif cli.get('all'):
        tobuild = discoverAllUtilities(webReady=False, nativeReady=False)

    both = (not cli.get('web') and not cli.get('native'))
    for util in tobuild:
        if cli.get('web') or both:
            with printDoneOnCompletion(f'Building {util.name} web...'):
                util.buildWebDistribution()
        if cli.get('native') or both:
            with printDoneOnCompletion(f'Building {util.name} native...'):
                util.buildNativeDistribution()


class UtilbinHTTPServer(PlainHTTPServer):
    def __init__(self, api, wrapper=None):
        super().__init__(wrapper)
        self.api = api


class UtilbinRequestHandler(PlainHTTPSocketWrapper):
    # TODO(grun): Re-implement handleRequest() to stream POST data into the
    # spawned utility's stdin. In other words, don't buffer it.
    async def handleRequest(self, req, data=None):
        api = self.server.api
        f = furl(req.target.decode('utf8'))
        argv = urlToArgv(f.url)
        resource = f.path.segments[0]
        action = lget(f.path.segments, 1, defaultResourceAction(api, resource))

        if data:
            argv.insert(0, data)

        util = api.get(resource, {}).get(action)
        if util:
            try:
                success, stdout, stderr = await runUtility(util, action, argv)
            except InvalidUsage as e:
                await self.sendTextResponse(400, e.message)
            else:
                if success and stdout is not None:
                    await self.sendTextResponse(200, stdout)
        else:
            await self.sendTextResponse(404, 'Utility not found')


def listenServerCLI(cli):
    interface = '127.0.0.1'
    port = int(cli.get('--port') or '0') or DEFAULT_PORT
    print(f'Listening for requests on http://{interface}:{port}/...')

    utils = discoverAllUtilities(nativeReady=True)
    api = buildAPI(utils)
    server = UtilbinHTTPServer(api, UtilbinRequestHandler)
    if cli.get('[TODO-DAEMON-MODE]'):  # Daemon mode.
        raise NotImplementedError  # TODO(grun): Implement daemonization.
    else:  # Listen mode.
        server.serveForever(interface, port)  # Starts the curio kernel.

def main():
    try:
        cli = docopt.docopt(USAGE, sys.argv[1:], options_first=True)
    except docopt.DocoptExit:
        print('Unrecognized argument(s) provided.\n')
        raise  # Exits this program; DocoptExit is a subclass of SystemExit.

    if cli.get('run'):
        curio.run(runUtilityCLI, cli)
    elif cli.get('build'):
        buildUtilitiesCLI(cli)
    elif cli.get('list') and cli.get('api'):
        listAPICLI(cli)
    elif cli.get('list') and cli.get('utilities'):
        listUtilitiesCLI(cli)
    else:  # Daemon and listen mode.
        listenServerCLI(cli)

if __name__ == '__main__':
    main()
